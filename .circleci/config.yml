version: 2.1
orbs:
  slack: circleci/slack@4.12.5

commands:
  destroy-environment:
    description: Destroy back-end and front-end CloudFormation stacks given a workflow ID.
    parameters:
      workflow-id:
        description: Workflow ID to identify the CloudFormation stacks.
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"  # Default to first 7 characters of workflow ID
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |

            # Delete backend stack if it was created
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow-id>>
            # Delete frontend stack if it was created
            aws s3 rm s3://udapeople-<< parameters.workflow-id >> --recursive
            aws s3 rb s3://udapeople-<< parameters.workflow-id >> --force
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow-id>> 
            # Exit with a failure status
            exit 1
  
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow-id:
        type: string   
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            echo "Querying https://kvdb.io/${KVDB_KEY}/migration_<< parameters.workflow-id >>"
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_KEY}/migration_<< parameters.workflow-id >>)
            echo "Migration success was $SUCCESS"
            if [ "$SUCCESS" -eq "1" ]; 
            then
              echo "Reverting migration"
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - run:
          name: "Compiled code will be retrieved by Deploy backend stage"
          command: |
            mkdir /tmp/workspace/
            cp ./backend/package.json /tmp/workspace/
            cd backend/dist
            tar -zcvf /tmp/workspace/backend.tar.gz ./
 #           tar -zcvf ./../../backend.tar.gz ./
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - package.json
            - backend.tar.gz

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm install
            npm run test
  test-backend:
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend]
      - run:
          name: Test backend
          command: |
            cd backend
            npm install
            npm run test
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
      - slack/notify:
          event: fail
          mentions: "@amit sharma"
          template: basic_fail_1
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: Scan backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli  # Replace with the Docker image that supports AWS CLI
    steps:
      - checkout  # Checkout code from Git
      - run:
          name: Install tar and gzip
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end IP to Ansible inventory
          command: |
            # Fetch EC2 instance IP
            aws ec2 describe-instances \
             --filters "Name=tag:Name,Values=backend-*" \
             --query "Reservations[].Instances[].PublicIpAddress" \
             --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - "project" 
      # Destroy environment on failure
      - destroy-environment:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python:3.11-rc-alpine # Docker image that supports Ansible
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "e3:02:15:88:cb:84:1d:a0:3d:f3:63:1d:b5:97:36:e9"
      # Attach workspace to the job
      - attach_workspace:
          at: ~/
      # Install dependencies
      - run:
          name: Install dependencies
          command: |
            apk add ansible gzip openssh-client

      # Configure server
      - run:
          name: Configure server
          command: |
            # Run the Ansible playbook against the EC2 instance
            ansible-playbook \
             .circleci/ansible/configure-server.yml \
             -i .circleci/ansible/inventory.txt -vvvv
      - destroy-environment:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: 'circleci/node:13.8.0'
    steps:
      - checkout
      - restore_cache:
            keys: [backend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Add env vars to .env file
          command: |
            echo ENVIRONMENT=$ENVIRONMENT > "./backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "./backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "./backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "./backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "./backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "./backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "./backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "./backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "./backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "./backend/.env"
      - run:
          name: Run migrations
          command: |
            cd backend/src
            npm install
            ## Run and save the migration output
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/src/migrations_dump.txt
            then
              curl --insecure https://kvdb.io/${KVDB_TOKEN}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d 'success'
            fi
      
      - destroy-environment:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7} 
      - revert-migrations: 
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0 
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Get backend url
          command: |
            export INSTANCE_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --output text)
            export API_URL="http://${INSTANCE_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${INSTANCE_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
  deploy-backend:
    docker:
      - image: python:3.11-rc-alpine 
    steps:
      - checkout
      - add_ssh_keys:
            fingerprints: ["e3:02:15:88:cb:84:1d:a0:3d:f3:63:1d:b5:97:36:e9"]
      - attach_workspace:
          at: ~/
      - attach_workspace:
          at: /tmp/workspace  
      - restore_cache:
          keys: [backend-build]
      - run:
          name: "Install dependencies"
          command: |            
            apk add --update ansible openssh-client tar gzip curl nodejs npm
            ansible --version
            pip install awscli
            aws --version            
      - run:
          name: Add env vars to .env file
          command: |
            echo ENVIRONMENT=$ENVIRONMENT > "./backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "./backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "./backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "./backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "./backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "./backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "./backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "./backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "./backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "./backend/.env"
      - run:
          name: "Deploy and Start backend"
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=false
            ansible-playbook -i inventory.txt deploy-backend.yml     
      - destroy-environment:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7} 
 
  smoke-test:
    docker:
      - image: alpine:latest
    steps:
      - checkout  # Checkout code from Git
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache curl nodejs npm aws-cli
      - run:
          name: Backend smoke test.
          command: |
            export INSTANCE_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-*" --query "Reservations[].Instances[].PublicIpAddress" --output text)
            echo ${INSTANCE_IP}
            export API_URL="http://${INSTANCE_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              echo "Backend smoke test passed."
            else
              echo "Backend smoke test failed."
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo "${URL}"
            if curl -s "${URL}" | grep "Welcome"
            then
              echo "Frontend smoke test passed."
            else
              echo "Frontend smoke test failed."
              exit 1
            fi    
      
      - revert-migrations: 
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - run: 
          name: Record previously deployed workflow-id
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo "Old workflow ID is $OldWorkflowID"
            echo $OldWorkflowID > ~/OldWorkflowID.txt
            cat ~/OldWorkflowID.txt
            curl -k https://kvdb.io/${KVDB_KEY}/OldWorkflow_${CIRCLE_WORKFLOW_ID:0:7}  -d $OldWorkflowID
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - persist_to_workspace:
          root: ~/
          paths: 
            - OldWorkflowID.txt
      - destroy-environment:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}   
      - revert-migrations: 
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}   
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(curl --insecure  https://kvdb.io/${KVDB_KEY}/OldWorkflow_${CIRCLE_WORKFLOW_ID:0:7})
            echo "Old workflow ID: ${OldWorkflowID}"
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"   
            echo "New workflow ID = ${CIRCLE_WORKFLOW_ID:0:7}"
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]
            then
                echo "Destroying S3 bucket s3://udapeople-${OldWorkflowID}"
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive              
                echo "Destroying stack udapeople-backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}
                echo "Destroying stack udapeople-frontend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}
            fi


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
          context: slack-credentials
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
